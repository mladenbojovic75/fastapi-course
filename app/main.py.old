
from multiprocessing import synchronize
from typing import Optional
from fastapi import FastAPI, Response, status, HTTPException, Depends
from fastapi.params import Body
from pydantic import BaseModel
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
from sqlalchemy.engine import cursor
from sqlalchemy.orm import Session
import time

from sqlalchemy.orm import Session
from . import models
from .database import engine, get_db

models.Base.metadata.create_all(bind=engine)
app = FastAPI()



class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    #rating: Optional[int] = None

while True:
      
  try:
      conn = psycopg2.connect(host='localhost',database='fastapi',user='postgres',
                              password='Postgres123',cursor_factory=RealDictCursor)
      cursor = conn.cursor()
      print('DB connection succesfull')
      break
  except Exception as error:
      print('DB connection failed')
      print('Error:',error)
      time.sleep(2)
  

# my_posts = [{"title": "title post 1","content": "content of post 1","id": 1},
#             {"title": "favourite foods","content": "I like pizza","id": 2}]

# def find_post(id):
#     for p in my_posts:
#         if p["id"] == id:
#             return p

# def find_index_post(id):
#     for i, p in enumerate(my_posts):
#         if p["id"] == id:
#            return i

@app.get("/")
def root():
    return {"message": "Hello World"}

@app.get("/sqlalchemy")
def test_posts(db: Session = Depends(get_db)):
    posts = db.query(models.Post).all()
    return {"data": posts}

@app.get("/posts")
#def get_posts():
    #cursor.execute("""SELECT * from posts""")
    #posts = cursor.fetchall()
def get_posts(db: Session = Depends(get_db)):
    posts = db.query(models.Post).all()
    return {"data": posts}

@app.post("/posts",status_code=status.HTTP_201_CREATED)
def create_posts(post: Post,db: Session = Depends(get_db)):
    # post_dict = post.dict()
    # post_dict['id'] = randrange(0,1000000)
    # my_posts.append(post_dict)
    # return {"data" : post_dict}
    #cursor.execute("""INSERT INTO posts (title,content,published) VALUES (%s,%s,%s) RETURNING *""",(post.title,post.content,post.published))
    #new_post = cursor.fetchone()
    #conn.commit()
    # convert to dictionary 
    # and unpack the dictionary
    #new_post = models.Post(title=post.title, content=post.content, published=post.published)
    new_post = models.Post(**post.dict())
    db.add(new_post) 
    db.commit()
    db.refresh(new_post)
    return {"data": new_post}


@app.get("/posts/latest")
#def get_latest_post():
def get_latest_post(db: Session = Depends(get_db)):
    #post = my_posts[len(my_posts)-1]
    post = db.query(models.Post).order_by(models.Post.id.desc()).first()
    return {"post_detail": post}

@app.get("/posts/{id}")
#def get_post(id: int, response: Response):
def get_post(id: int, response: Response,db: Session = Depends(get_db)):
    #cursor.execute("""SELECT * from posts WHERE id = %s""",(str(id),))
    #post = cursor.fetchone()
    #post = find_post(id)
    # use SQLAlchemy
    post = db.query(models.Post).filter(models.Post.id == id).first()
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"post with id: {id} was not found")
        # response.status_code = status.HTTP_404_NOT_FOUND
        # return {'message': f"post with id: {id} was not found"}
    return {"post_detail": post}

@app.delete("/posts/{id}",status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int,db: Session = Depends(get_db)):
    # cursor.execute("""DELETE from posts WHERE id = %s RETURNING *""",(str(id),))
    # deleted_post = cursor.fetchone()
    #index = find_index_post(id)
    #if index == None:
    # conn.commit()
    deleted_post = db.query(models.Post).filter(models.Post.id == id)
    
    if deleted_post.first() == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"post with id: {id} was not found")
    #my_posts.pop(index)
    deleted_post.delete(synchronize_session=False)
    db.commit()
    return Response(status_code=status.HTTP_204_NO_CONTENT)

@app.put("/posts/{id}")
#def update_posts(id: int, post: Post):
def update_posts(id: int, post: Post,db: Session = Depends(get_db)):
    # cursor.execute("""UPDATE posts SET title = %s,content = %s,published = %s WHERE id = %s RETURNING *""",
    #                (post.title,post.content,post.published,str(id),))
    # #index = find_index_post(id)
    # updated_post = cursor.fetchone()
    # conn.commit()
    post_query = db.query(models.Post).filter(models.Post.id == id)
    updated_post = post_query.first()
    if updated_post == None:
    #if index == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"post with id: {id} was not found")
    # post_dict = post.dict()
    # post_dict['id'] = id
    # my_posts[index] = post_dict
    # return {"data" : post_dict}
    post_query.update(post.dict(),synchronize_session=False)
    db.commit()
    return {"updated posts:": post_query.first()}