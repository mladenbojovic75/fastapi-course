nginx:
  enabled: true
  fullnameOverride: nginx
  configFile: default.conf
  htmlFiles:
    - board.html
    - index.html
    - logged_in.html
    - personal.html
    - post_in.html
    - voting.html
  volumes:
    - name: nginx-config
      configMap:
        name: nginx-config
    - name: nginx-html-files
      configMap: 
        name: nginx-html-files
  volumeMounts:
    - name: nginx-config
      mountPath: /etc/nginx/conf.d/default.conf
      subPath: default.conf
    - name: nginx-html-files
      mountPath: /usr/local/src
  ingress:
     enabled: true
     annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: web
        traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
        traefik.ingress.kubernetes.io/service.sticky.cookie.name: "nginx"
        traefik.ingress.kubernetes.io/service.sticky.cookie.samesite: "strict"
     hosts:
      - host: nginx.localhost.com
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  name: http
  nginxConfig: |
    upstream fastapi_server {
      server fastapi:8080;
    }   
    server {
      listen 80;
      listen [::]:80;   
      server_name nginx.localhost.com;    
      location / {
        root /usr/local/src;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
      }   
      location /protected {
        proxy_pass http://fastapi_server/protected;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /login {
        proxy_pass http://fastapi_server/login;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /callback {
        proxy_pass http://fastapi_server/callback;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /logout {
        proxy_pass http://fastapi_server/logout;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /posts {
        proxy_pass http://fastapi_server/posts;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /vote {
        proxy_pass http://fastapi_server/vote;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }   
      location /dashboard {
        proxy_pass http://fastapi_server/dashboard;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
      }
    }

fastapi:
  enabled: true
  fullnameOverride: fastapi
  image:
    repository: fastapi-keycloak
    tag: alpine
    pullPolicy: IfNotPresent
  env:
    - name: DATABASE_HOSTNAME
      value: postgres
    - name: DATABASE_PORT
      value: 5432
    - name: DATABASE_USERNAME
      value: postgres
    - name: DATABASE_PASSWORD
      value: Postgres123
    - name: DATABASE_NAME
      value: fastapi
    - name: PORT
      value: 8080
    - name: ROOT_PATH
      value: "/"
    - name: FASTAPI_APP
      value: "http://fastapi"
    - name: NGINX_URL
      value: "http://nginx.localhost.com"
    - name: KEYCLOAK_URL 
      value: "http://keycloak"
    - name: REALM_NAME
      value: "fastapi"
    - name: CLIENT_ID
      value: "fastapi"
    - name: CLIENT_SECRET
      value: "rNLwDMWMk8HH4qDhvvjhPfyK4Et4lYTq"
    - name: SECRET_KEY
      value: "9aec00abd622cac879f538871fa0d731000ca1c30e7b7a47508ca808c91585ba"
    - name: DOMAIN
      value: "nginx.localhost.com"
    - name: SESSION_LIFETIME
      value: 86400
    - name: CALLBACK_URL
      value: "http://nginx.localhost.com"
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  # livenessProbe:
  #   httpGet:
  #     path: /
  #     port: 8080
  # readinessProbe:
  #   httpGet:
  #     path: /
  #     port: 8080
  persistentVolume:
    name: migrations-pv-volume
    labels:
      type: local
    storageClassName: manual
    capacity:
      storage: 50Mi
    accessModes:
      - ReadWriteOnce
      basePath: /home/mladen/rancher-desktop/migrations
  persistentVolumeClaim:
    name: migrations-pv-claim
    storageClassName: manual
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
  migrations:
    enabled: true
    spec:
      completions: 1
      completionMode: Indexed 
      backoffLimitPerIndex: 10
      maxFailedIndexes: 1      
      ttlSecondsAfterFinished: 90
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0
      fsGroupChangePolicy: Always
    volumes:
         - name: migrations-pv-storage
           persistentVolumeClaim:
             claimName: migrations-pv-claim
         - name: migrations-script
           configMap:
             name: migrations-script
         - name: env-py
           configMap:
             name: env.py
    volumeMounts:
      - mountPath: /home/fastapi/migrations
        name: migrations-pv-storage
        readOnly: false
      - mountPath: /home/fastapi/migrations.sh
        name: migrations-script
        subPath: migrations.sh
      - mountPath: /home/fastapi/env.py
        name: env-py
        subPath: env.py
    command: 
      - /bin/sh
    args:
      - migrations.sh
postgres:
  fullnameOverride: postgres
  enabled: true
  image:
    repository: postgres
    tag: 17
    pullPolicy: IfNotPresent
  service:
    port: 5432
  podSecurityContext:
     runAsUser: 1000
     runAsGroup: 1000
  resources:
    limits:
      cpu: 512m
      memory: 512Mi
    requests:
      cpu: 512m
      memory: 128Mi
  env:
    - name: POSTGRES_PASSWORD
      value: Postgres123
    - name: PGDATA  
      value: /var/lib/postgresql/data/pgdata
  persistentVolume:
    name: postgres-pv-volume
    labels:
      type: local
    storageClassName: manual
    capacity:
      storage: 50Mi
    accessModes:
      - ReadWriteOnce
    hostPath:
      basePath: "/home/mladen/rancher-desktop/pgsql"
  persistentVolumeClaim:
    name: postgres-pv-claim
    storageClassName: manual
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
  volumes:
       - name: postgres-pv-storage
         persistentVolumeClaim:
           claimName: postgres-pv-claim
  volumeMounts:
    - mountPath: /var/lib/postgresql/data
      name: postgres-pv-storage
      readOnly: false
pgadmin:
  fullnameOverride: pgadmin
  enabled: true
  image:
    repository: dpage/pgadmin4
    tag: latest
    pullPolicy: IfNotPresent
  service:
    port: 8080
  podSecurityContext:
     runAsUser: 0
     runAsGroup: 0
  resources:
    limits:
      cpu: 512m
      memory: 256Mi
    requests:
      cpu: 512m
      memory: 128Mi
  env:
    - name: PGADMIN_DEFAULT_PASSWORD
      value: Postgres123
    - name: PGADMIN_DEFAULT_EMAIL  
      value: brokenmojo@gmail.com
    - name: PGADMIN_LISTEN_PORT
      value: 8080 
  persistentVolume:
    name: pgadmin-pv-volume
    labels:
      type: local
    storageClassName: manual
    capacity:
      storage: 50Mi
    accessModes:
      - ReadWriteOnce
    hostPath:
      basePath: "/home/mladen/rancher-desktop/pgadmin"
  persistentVolumeClaim:
    name: pgadmin-pv-claim
    storageClassName: manual
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
  volumes:
       - name: pgadmin-config
         configMap:
            name: pgadmin-config
       - name: pgadmin-data
         persistentVolumeClaim:
            claimName: pgadmin-pv-claim
  volumeMounts:
    - name: pgadmin-config
      mountPath: /pgadmin4/servers.json
      subPath: servers.json
      readOnly: true
    - name: pgadmin-data
      mountPath: /var/lib/pgadmin
  ingress:
     enabled: true
     annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: web
     hosts:
      - host: pgadmin.localhost.com
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pgadmin
                port:
                  name: pgadmin
keycloak:
  enabled: true
  fullnameOverride: keycloak
  resources:
    limits:
      cpu: 2048m
      memory: 1024Mi
    requests:
      cpu: 512m
      memory: 256Mi
  initContainers:
      - name: init-postgres-db
        image: postgres:17 
        command: ['sh', '-c']
        args:
        - |
          set -x
          env
          until PGPASSWORD=$KEYCLOAK_DATABASE_PASSWORD psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_DATABASE_USER -c '\l'; do
            echo "Waiting for PostgreSQL to be available..."
            sleep 2
          done
          
          # Check if the database exists
          if ! PGPASSWORD=$KEYCLOAK_DATABASE_PASSWORD psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_DATABASE_USER -lqt | cut -d \| -f 1 | grep -qw keycloak; then
            echo "Database 'keycloak' does not exist. Creating..."
            PGPASSWORD=$KEYCLOAK_DATABASE_PASSWORD psql -h $KEYCLOAK_DATABASE_HOST -p $KEYCLOAK_DATABASE_PORT -U $KEYCLOAK_DATABASE_USER -c "CREATE DATABASE keycloak;"
          else
            echo "Database 'keycloak' already exists."
          fi
        env:
          - name: KEYCLOAK_DATABASE_HOST
            value: "postgres"
          - name: KEYCLOAK_DATABASE_PORT
            value: "5432"
          - name: KEYCLOAK_DATABASE_USER
            value: "postgres"
          - name: KEYCLOAK_DATABASE_PASSWORD
            value: "Postgres123"
  postgresql:
    enabled: false
  externalDatabase:
    host: postgres
    user: postgres
    password: Postgres123
    database: keycloak
    port: 5432
  auth:
    adminUser: admin
    adminPassword: Keycloak123
  replicaCount: 1
  containerPorts:
    http: 8080
  global:
    security:
      allowInsecureImages: true
  ingress:
    enabled: true
    hostname: keycloak.localhost.com
    annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: web
        traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
        traefik.ingress.kubernetes.io/service.sticky.cookie.name: "keycloak"
        traefik.ingress.kubernetes.io/service.sticky.cookie.samesite: "strict"
